# This file contains all available configuration options
# with their default values.

# options for analysis running
run:
  # Define the Go version limit.
  go: "1.20"

  # default concurrency is a available CPU number
  # concurrency: 4

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 30m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

  # list of build tags, all linters use it. Default is empty list.
  # build-tags:
  #   - mytag

  # which dirs to skip: issues from them won't be reported;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but default dirs are skipped independently
  # from this option's value (see skip-dirs-use-default).
  # skip-dirs:
  #   - src/external_libs
  #   - autogenerated_by_my_lib

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  # skip-files:
  #   - ".*\\.my\\.go$"
  #   - lib/bad.go

  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  # modules-download-mode: readonly|release|vendor

# output configuration options
output:
  # The formats used to render issues.
  # Format: `colored-line-number`, `line-number`, `json`, `colored-tab`, `tab`, `checkstyle`, `code-climate`, `junit-xml`, `github-actions`, `teamcity`
  # Output path can be either `stdout`, `stderr` or path to the file to write to.
  #
  # For the CLI flag (`--out-format`), multiple formats can be specified by separating them by comma.
  # The output can be specified for each of them by separating format name and path by colon symbol.
  # Example: "--out-format=checkstyle:report.xml,json:stdout,colored-line-number"
  # The CLI flag (`--out-format`) override the configuration file.
  #
  # Default:
  #   formats:
  #     - format: colored-line-number
  #       path: stdout
  formats:
    - format: colored-line-number
      path: stdout
    - format: code-climate
      path: gl-code-quality-report.json
    - format: checkstyle
      path: checkstyle.xml

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true

# all available settings of specific linters
linters-settings:
  errcheck:
    # report about not checking of errors in type assetions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: false

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: false

    # [deprecated] comma-separated list of pairs of the form pkg:regex
    # the regex is used to ignore names within pkg. (default "fmt:.*").
    # see https://github.com/kisielk/errcheck#the-deprecated-method for details
    # ignore: fmt:.*,io/ioutil:^Read.*

    # path to a file containing a list of functions to exclude from checking
    # see https://github.com/kisielk/errcheck#excluding-functions for details
    # exclude: /path/to/file.txt

  # Disable error checking, as errorcheck detects more errors and is more configurable.
  gosec:
    excludes:
      - "G104"

  funlen:
    lines: 60
    statements: 40

  govet:
    enable:
      - appends
      - asmdecl
      - assign
      - atomic
      - bools
      - buildtag
      - cgocall
      - composites
      - copylocks
      - defers
      - directive
      - errorsas
      - framepointer
      - ifaceassert
      - loopclosure
      - lostcancel
      - nilfunc
      - printf
      - shadow
      - shift
      - sigchanyzer
      - slog
      - stdmethods
      - stringintconv
      - structtag
      - testinggoroutine
      - tests
      - timeformat
      - unmarshal
      - unreachable
      - unsafeptr
      - unusedresult
    # settings per analyzer
    settings:
      printf: # analyzer name, run `go tool vet help` to see all analyzers
        funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
  revive:
    rules:
      # Disable exported function and methods should have comments.
      - name: exported
        disabled: true
      - name: argument-limit
        disabled: false
        arguments: [4]
      - name: atomic
        disabled: false
      - name: blank-imports
        disabled: false
      - name: confusing-naming
        disabled: false
      - name: confusing-results
        disabled: false
      - name: constant-logical-expr
        disabled: false
      - name: context-keys-type
        disabled: false
      - name: duplicated-imports
        disabled: false
      - name: empty-block
        disabled: false
      - name: error-return
        disabled: false
      - name: function-result-limit
        disabled: false
        arguments: [3]
      - name: identical-branches
        disabled: false
      - name: nested-structs
        disabled: false
      - name: range-val-in-closure
        disabled: false
      - name: range-val-address
        disabled: false
      - name: redefines-builtin-id
        disabled: false
      - name: string-of-int
        disabled: false
      - name: superfluous-else
        disabled: false
      - name: time-equal
        disabled: false
      - name: time-naming
        disabled: false
      - name: unnecessary-stmt
        disabled: false
      - name: unused-receiver
        disabled: false
      - name: unreachable-code
        disabled: false
      - name: waitgroup-by-value
        disabled: false
  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true
    # Apply the rewrite rules to the source before reformatting.
    # https://pkg.go.dev/cmd/gofmt
    # Default: []
    rewrite-rules:
      - pattern: "interface{}"
        replacement: "any"
      - pattern: "a[b:len(a)]"
        replacement: "a[b:]"
  # goimports:
  # A comma-separated list of prefixes, which, if set, checks import paths
  # with the given prefixes are grouped after 3rd-party packages.
  # local-prefixes: github.com/org/project
  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 30
  gocognit:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 20
  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 150
  goconst:
    # minimal length of string constant, 3 by default
    min-len: 10
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 3
    # Ignore test files.
    # Default: false
    ignore-tests: true
  depguard:
    # Rules to apply.
    #
    # Variables:
    # - File Variables
    #   you can still use and exclamation mark ! in front of a variable to say not to use it.
    #   Example !$test will match any file that is not a go test file.
    #
    #   `$all` - matches all go files
    #   `$test` - matches all go test files
    #
    # - Package Variables
    #
    #  `$gostd` - matches all of go's standard library (Pulled from `GOROOT`)
    #
    # Default: no rules.
    rules:
      # Name of a rule.
      main:
        # List of file globs that will match this list of settings to compare against.
        # Default: $all
        files:
          - "$all"
        # Packages that are not allowed where the value is a suggestion.
        deny:
          - pkg: "bou.ke/monkey"
            desc: "Monkey patching is not de way. If you need to mock `time.Time`, use 'github.com/benbjohnson/clock'."
  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    locale: US
    ignore-words:
      - GitLab
  lll:
    # max line length, lines longer will be reported. Default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option
    line-length: 120
    # tab width in spaces. Default to 1.
    tab-width: 1
  unused:
    # Mark all struct fields that have been written to as used.
    # Default: true
    field-writes-are-uses: true
    # Treat IncDec statement (e.g. `i++` or `i--`) as both read and write operation instead of just write.
    # Default: false
    post-statements-are-reads: true
    # Mark all exported identifiers as used.
    # Default: true
    exported-is-used: true
    # Mark all exported fields as used.
    # default: true
    exported-fields-are-used: true
    # Mark all function parameters as used.
    # default: true
    parameters-are-used: true
    # Mark all local variables as used.
    # default: true
    local-variables-are-used: false
    # Mark all identifiers inside generated files as used.
    # Default: true
    generated-is-used: true
  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 30
  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: false # Report preallocation suggestions on for loops, false by default
  gocritic:
    # Which checks should be enabled; can't be combined with 'disabled-checks';
    # See https://go-critic.github.io/overview#checks-overview
    # To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`
    # By default list of stable checks is used.
    # enabled-checks:
    #   - rangeValCopy

    # Which checks should be disabled; can't be combined with 'enabled-checks'; default is empty
    # disabled-checks:
    #   - regexpMust

    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
    # Empty list by default. See https://github.com/go-critic/go-critic#usage -> section "Tags".
    # enabled-tags:
    #   - performance

    settings: # settings passed to gocritic
      captLocal: # must be valid enabled check name
        paramsOnly: true
    # rangeValCopy:
    #   sizeThreshold: 32
  godox:
    # report any comments starting with keywords, this is useful for TODO or FIXME comments that
    # might be left in the code accidentally and should be resolved before merging
    keywords: # default keywords are TODO, BUG, and FIXME, these can be overwritten by this setting
      - TODO
      - BUG
      - FIXME
      - NOTE
      - OPTIMIZE # marks code that should be optimized before merging
      - HACK # marks hack-arounds that should be removed before merging
  dogsled:
    # checks assignments with too many blank identifiers; default is 2
    max-blank-identifiers: 2

  whitespace:
    multi-if: false # Enforces newlines (or comments) after every multi-line if statement
    multi-func: false # Enforces newlines (or comments) after every multi-line function signature
  stylecheck:
    # STxxxx checks in https://staticcheck.io/docs/configuration/options/#checks
    checks: # https://staticcheck.io/docs/options#checks
      - "all"
      - "-ST1000"
    # https://staticcheck.io/docs/configuration/options/#dot_import_whitelist
    dot-import-whitelist:
      - fmt
      - "github.com/onsi/ginkgo/v2"
      - "github.com/onsi/gomega"
    initialisms: [
        "RDN",
        # Default: https://staticcheck.io/docs/configuration/options/#initialisms
        "ACL",
        "API",
        "ASCII",
        "CPU",
        "CSS",
        "DNS",
        "EOF",
        "GUID",
        "HTML",
        "HTTP",
        "HTTPS",
        "ID",
        "IP",
        "JSON",
        "QPS",
        "RAM",
        "RPC",
        "SLA",
        "SMTP",
        "SQL",
        "SSH",
        "TCP",
        "TLS",
        "TTL",
        "UDP",
        "UI",
        "GID",
        "UID",
        "UUID",
        "URI",
        "URL",
        "UTF8",
        "VM",
        "XML",
        "XMPP",
        "XSRF",
        "XSS",
        "SIP",
        "RTP",
        "AMQP",
        "DB",
        "TS",
      ]
  nolintlint:
    # Disable to ensure that all nolint directives actually have an effect.
    # Default: false
    allow-unused: false
    # Exclude following linters from requiring an explanation.
    # Default: []
    allow-no-explanation: ["funlen", "dupl"]
    # Enable to require an explanation of nonzero length after each nolint directive.
    # Default: false
    require-explanation: true
    # Enable to require nolint directives to mention the specific linter being suppressed.
    # Default: false
    require-specific: true
  asasalint:
    # To specify a set of function names to exclude.
    # The values are merged with the builtin exclusions.
    # The builtin exclusions can be disabled by setting `use-builtin-exclusions` to `false`.
    # Default: ["^(fmt|log|logger|t|)\.(Print|Fprint|Sprint|Fatal|Panic|Error|Warn|Warning|Info|Debug|Log)(|f|ln)$"]
    exclude: []
    # To enable/disable the asasalint builtin exclusions of function names.
    # See the default value of `exclude` to get the builtin exclusions.
    # Default: true
    use-builtin-exclusions: true
    # Ignore *_test.go files.
    # Default: false
    ignore-test: true
  decorder:
    # If true, underscore vars (vars with "_" as the name) will be ignored at all checks
    # Default: false (underscore vars are not ignored)
    ignore-underscore-vars: true
    # If true, order of declarations is not checked at all.
    # Default: true (disabled)
    disable-dec-order-check: true
    # If true, `init` func can be anywhere in file (does not have to be declared before all other functions).
    # Default: true (disabled)
    disable-init-func-first-check: false
    # If true, multiple global `type`, `const` and `var` declarations are allowed.
    # Default: true (disabled)
    disable-dec-num-check: true
    # If true, type declarations will be ignored for dec num check
    # Default: false (type statements are not ignored)
    disable-type-dec-num-check: true
    # If true, const declarations will be ignored for dec num check
    # Default: false (const statements are not ignored)
    disable-const-dec-num-check: true
    # If true, var declarations will be ignored for dec num check
    # Default: false (var statements are not ignored)
    disable-var-dec-num-check: true
  errorlint:
    # Check whether fmt.Errorf uses the %w verb for formatting errors.
    # See the https://github.com/polyfloyd/go-errorlint for caveats.
    # Default: true
    errorf: true
    # Permit more than 1 %w verb, valid per Go 1.20 (Requires errorf:true)
    # Default: true
    errorf-multi: true
    # Check for plain type assertions and type switches.
    # Default: true
    asserts: false
    # Check for plain error comparisons.
    # Default: true
    comparison: false
  forbidigo:
    # Forbid the following identifiers (list of regexp).
    # Default: ["^(fmt\\.Print(|f|ln)|print|println)$"]
    forbid:
      # Builtin function:
      - ^print.*$
      # Optional message that gets included in error reports.
      - p: ^fmt\.Print.*$
        msg: Do not commit print statements.
    # Exclude godoc examples from forbidigo checks.
    # Default: true
    exclude-godoc-examples: true
    # Instead of matching the literal source code,
    # use type information to replace expressions with strings that contain the package name
    # and (for methods and fields) the type name.
    # This makes it possible to handle import renaming and forbid struct fields and methods.
    # Default: false
    analyze-types: false
  ginkgolinter:
    # Suppress the wrong length assertion warning.
    # Default: false
    suppress-len-assertion: false
    # Suppress the wrong nil assertion warning.
    # Default: false
    suppress-nil-assertion: false
    # Suppress the wrong error assertion warning.
    # Default: false
    suppress-err-assertion: true
    # Suppress the wrong comparison assertion warning.
    # Default: false
    suppress-compare-assertion: false
    # Suppress the function all in async assertion warning.
    # Default: false
    suppress-async-assertion: false
    # Suppress warning for comparing values from different types, like int32 and uint32
    # Default: false
    suppress-type-compare-assertion: false
    # Trigger warning for ginkgo focus containers like FDescribe, FContext, FWhen or FIt
    # Default: false
    forbid-focus-container: true
    # Don't trigger warnings for HaveLen(0)
    # Default: false
    allow-havelen-zero: false
  interfacebloat:
    # The maximum number of methods allowed for an interface.
    # Default: 10
    max: 7
  makezero:
    # Allow only slices initialized with a length of zero.
    # Default: false
    always: false
  perfsprint:
    # Optimizes even if it requires an int or uint type cast.
    # Default: true
    int-conversion: false
    # Optimizes into `err.Error()` even if it is only equivalent for non-nil errors.
    # Default: false
    err-error: true
    # Optimizes `fmt.Errorf`.
    # Default: true
    errorf: true
    # Optimizes `fmt.Sprintf` with only one argument
    # Default: true
    sprintf1: true

linters:
  # please, do not use `enable-all`: it's deprecated and will be removed soon.
  # inverted configuration with `enable-all` and `disable` is not scalable during updates of golangci-lint
  disable-all: true
  enable:
    - asasalint
    - bidichk
    - bodyclose
    - containedctx
    - decorder
    - depguard
    - dogsled
    - dupl
    - durationcheck
    - errcheck
    - errorlint
    - exportloopref
    - forbidigo
    - funlen
    - ginkgolinter
    - gocognit
    - goconst
    - gocritic
    - godox
    - gofmt
    - goimports
    - gosec
    - gosimple
    - govet
    - ineffassign
    - interfacebloat
    - makezero
    - misspell
    - nakedret
    - nolintlint
    - perfsprint
    - revive
    - staticcheck
    - stylecheck
    - typecheck
    - unconvert
    - unparam
    - unused
    - whitespace

issues:
  # List of regexps of issue texts to exclude, empty list by default.
  # But independently from this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. To list all
  # excluded by default patterns execute `golangci-lint run --help`
  # exclude:
  #   - abcdef

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec
        - funlen
        - containedctx
        - forbidigo

    # Exclude known linters from partially hard-vendored code,
    # which is impossible to exclude via "nolint" comments.
    # - path: internal/hmac/
    #   text: "weak cryptographic primitive"
    #   linters:
    #     - gosec

    # Exclude some staticcheck messages
    # - linters:
    #     - staticcheck
    #   text: "SA9003:"

    # Exclude lll issues for long lines with go:generate
    - linters:
        - lll
      source: "^//go:generate "

  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: false

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  # Default is false.
  new: false

  # Show only new issues created after git revision `REV`
  # This should be passed as flag during individual CI jobs.
  # new-from-rev: REV

  # Show only new issues created in git patch with set file path.
  # new-from-patch: path/to/patch/file

  # Enables exclude of directories:
  # - vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  # Default: true
  exclude-dirs-use-default: true
